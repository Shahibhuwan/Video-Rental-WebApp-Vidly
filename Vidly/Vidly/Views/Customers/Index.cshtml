@model IEnumerable<Vidly.Models.Customer>
@* ienumerable is used because we sent list of moive/customers 2 in the form of obj to this vivew*@
@*
    Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@
@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Customers</h2>2
@*@if (!Model.Any())
{
    <p>We don't have any customers yet.</p>
}
else
{
    
}*@
<table id="customers" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Membership Type</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

@section scripts
{
    <script>
        $(document).ready(function () {

           var table = $("#customers").DataTable({
                ajax: {
                    url: "/api/customers",
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "name",
                        render: function (data, type, customer) {
                            return "<a href='/customers/edit/" + customer.id + "'>" + customer.name + "</a>";
                        }
                    },
                    {
                        data: "membershipType.name"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-customer-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });




        $("#customers ").on("click", ".js-delete", function () {
            var button = $(this);
            bootbox.confirm("Are you sure you want to delete this customer", function (result) {
                if (result) {
                    $.ajax({
                        url: "/api/customers/" + button.attr("data-customer-id"),
                        method: "DELETE",
                        success: function () {
                           
                            table.row(button.parents("tr")).remove().draw();
                           
                        }
                    });
                }
            }
            )

        });
            });
    </script>
}
@*create view in server and return html mark on the client  *@
@*datable extract data from dom element and contruct own list of customer in the form of json ///datatable use json object to search and sort and pagenation*@
@*dtattable is plugin which need to be confiured in bundle then in index page*@
@*on action return function is called*@
@*jquery ajax iss used to call api from server*@
@*The click() method triggers the click event, or attaches a function to run when a click event occurs.*@
@*The ready event occurs when the DOM (document object model) has been loaded.*@
@*The on() method attaches one or more event handlers for the selected elements and child elements.*@
@* @foreach (var customer in Model)

    {
        <tr>
            @* <td>@Html.ActionLink(customer.Name, "Details", "Customers", new { id = customer.Id }, null)</td> is used to send parameters in url to the specified controller for data representing 
<td>@Html.ActionLink(customer.Name, "Edit", "Customers", new { id = customer.Id }, null)</td>
<td>@customer.MembershipType.DiscountRate% </td>
<td>@customer.MembershipType.Name</td>

<td> <button data-customer-id="@customer.Id" class="btn-link js-delete">Delete</button></td>
                </tr>
            }*@